<Popup x:Class="Gymdata.Accreditation.View.ColorPickerView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:view="clr-namespace:Gymdata.Accreditation.View"
    xmlns:viewModel="clr-namespace:Gymdata.Accreditation.ViewModel"
    xmlns:util="clr-namespace:Gymdata.Accreditation.Util"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:command="http://www.galasoft.ch/mvvmlight"
    mc:Ignorable="d"
    PopupAnimation="Fade" StaysOpen="False" AllowsTransparency="True"
    HorizontalOffset="-2" VerticalOffset="1"
    d:DataContext="{d:DesignInstance Type=viewModel:ColorPickerViewModel, IsDesignTimeCreatable=False}"
    IsOpen="{Binding IsOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, FallbackValue=False}"
>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Opened">
            <command:EventToCommand Command="{Binding Path=ViewLoadedCmd}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseDown">
            <command:EventToCommand Command="{Binding Path=MouseDownCmd}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseMove">
            <command:EventToCommand Command="{Binding Path=MouseMoveCmd}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseUp">
            <command:EventToCommand Command="{Binding Path=MouseUpCmd}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    
    <Border Margin="20" Padding="5" Background="{StaticResource ControlColor}" BorderThickness="1" BorderBrush="{StaticResource DarkBorderColor}" IsHitTestVisible="True">
        <Border.Effect>
            <DropShadowEffect BlurRadius="9" Opacity="0.5" Direction="-90"/>
        </Border.Effect>

        <Grid Width="270" Height="310">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="30"/>
                <RowDefinition Height="30"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Grid.Row="0" Grid.Column="0" Padding="2" Background="{StaticResource DarkControlColor}">
                    <Border ClipToBounds="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Loaded">
                                <command:EventToCommand Command="{Binding Path=DialViewLoadedCmd}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Border.Background>
                            <VisualBrush Visual="{Binding DialImage}"/>
                        </Border.Background>
                        <Border HorizontalAlignment="Left" VerticalAlignment="Top"
                                Margin="{Binding DialPointerMargin, Mode=OneWay, NotifyOnSourceUpdated=True}">
                            <Border.Clip>
                                <RectangleGeometry Rect="-10 -10 20 20"/>
                            </Border.Clip>
                            <Ellipse Width="20" Height="20" Margin="-10 -10 0 0" Stroke="{StaticResource DarkControlColor}" StrokeThickness="2" Fill="Black"/>
                        </Border>
                    </Border>
                </Border>
                <Border Grid.Row="0" Grid.Column="1" Padding="2" Background="{StaticResource DarkControlColor}" Width="30">
                    <Border ClipToBounds="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Loaded">
                                <command:EventToCommand Command="{Binding Path=HueViewLoadedCmd}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Border.Background>
                            <VisualBrush Visual="{Binding HueImage}"/>
                        </Border.Background>
                        <Border HorizontalAlignment="Right" VerticalAlignment="Top"
                                Margin="{Binding HuePointerMargin, Mode=OneWay, NotifyOnSourceUpdated=True}">
                            <Border.Clip>
                                <RectangleGeometry Rect="0 -15 30 30"/>
                            </Border.Clip>
                            <Polygon Width="30" Height="30" ClipToBounds="False"
                                     Stroke="{StaticResource DarkControlColor}" StrokeThickness="2" Fill="Black"
                                     Margin="0 -15 0 0" Points="15,15 30,0 30,30"/>
                        </Border>
                    </Border>
                </Border>
            </Grid>
            <Grid Grid.Row="1" Grid.Column="0" Margin="10 0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="Color: " VerticalAlignment="Center"/>
                <Border Grid.Column="1" Margin="4" Background="{StaticResource DarkBorderColor}" Padding="1">
                    <Border Background="{StaticResource DarkControlColor}" Padding="2">
                        <Border>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Color, Converter={StaticResource HexToColorConverter}, FallbackValue={StaticResource DarkControlColor}}"/>
                            </Border.Background>
                        </Border>
                    </Border>
                </Border>
            </Grid>
            <Grid Grid.Row="1" Grid.Column="1" Margin="10 0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="Hex code: " VerticalAlignment="Center"/>
                <TextBox Grid.Column="1" VerticalAlignment="Center" Margin="4 0 0 0"
                         Text="{Binding Path=Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyUp">
                            <command:EventToCommand Command="{Binding Path=InputChangedCmd}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseUp">
                            <command:EventToCommand Command="{Binding Path=InputChangedCmd}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>
            <Grid Grid.Row="2" Column="0" ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Margin="5 4" Content="Pick" Command="{Binding SubmitCmd}"/>
                <Button Grid.Column="1" Margin="5 4" Content="Reset" Command="{Binding ResetCmd}"/>
                <Button Grid.Column="2" Margin="5 4" Content="Cancel" Command="{Binding CancelCmd}"/>
            </Grid>
        </Grid>
    </Border>
</Popup>
